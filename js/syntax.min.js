(()=>{const e=[{regex:`\\b(${["abstract","arguments","await","boolean","break","byte","case","catch","char","class","const","continue","debugger","default","delete","do","double","else","enum","eval","export","extends","false","final","finally","float","for","function","goto","if","implements","import","in","instanceof","int","interface","let","long","native","new","null","package","private","protected","public","return","short","static","super","switch","synchronized","this","throw","throws","transient","true","try","typeof","var","void","volatile","while","with","yield"].join("|")})\\b`,params:["g"],replaceWith:"¹$1¹"},{regex:`\\b(${["Array","Date","hasOwnProperty","Infinity","isFinite","isNaN","isPrototypeOf","length","Math","NaN","name","Number","Object","prototype","String","toString","undefined","valueOf"].join("|")})\\b`,params:["g"],replaceWith:"²$1²"},{regex:"('.*')|(\".*\")|(`.*`)",params:["g"],replaceWith:"³$&³"},{regex:"(\\${.*})",params:["g"],replaceWith:"¹$1¹"},{regex:"(#.*)",params:["g"],replaceWith:"⁴$1⁴"},{regex:"¹([^¹]*)¹",params:["g"],replaceWith:'<spam class="reserved">$1</spam>'},{regex:"²([^²]*)²",params:["g"],replaceWith:'<spam class="methods">$1</spam>'},{regex:"³([^³]*)³",params:["g"],replaceWith:'<spam class="variable">$1</spam>'},{regex:"⁴([^⁴]*)⁴",params:["g"],replaceWith:'<spam class="comment">$1</spam>'},{regex:"(/\\*[^*]*\\*+(?:[^/*][^*]*\\*+)*/)",params:["g"],replaceWith:'<spam class="comment">$1</spam>'},{regex:"([+-]?([0-9]*[.])?[0-9]+)",params:["g"],replaceWith:'<spam class="number">$1</spam>'}],a=a=>{let r=a.innerText.trim();for(const a of e)r=r.replace(new RegExp(a.regex,...a.params),a.replaceWith);return r.split(/\n/).map(e=>`<div>${e}</div>`).join("")};(()=>{for(const e of document.querySelectorAll("code"))e.innerHTML=a(e)})()})();